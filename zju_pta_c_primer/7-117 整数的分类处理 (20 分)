给定 N 个正整数，要求你从中得到下列三种计算结果：
A1 = 能被 3 整除的最大整数
A2 = 存在整数 K 使之可以表示为 3K+1 的整数的个数
A3 = 存在整数 K 使之可以表示为 3K+2 的所有整数的平均值（精确到小数点后 1 位）

输入格式：
输入首先在第一行给出一个正整数 N，随后一行给出 N 个正整数。所有数字都不超过 100，同行数字以空格分隔。
输出格式：
在一行中顺序输出 A1、A2、A3的值，其间以 1 个空格分隔。如果某个数字不存在，则对应输出NONE。

输入样例 1：
8
5 8 7 6 9 1 3 10
输出样例 1：
9 3 6.5

输入样例 2：
8
15 18 7 6 9 1 3 10
输出样例 2：
18 3 NONE

Code(gcc):

#include <stdio.h>
int main(void)
{
    int a1,a2,f3,n,i;     //a1,a2,a3是输出部分兼具标记位，当然是因为输入全是正整数，否则还要多个标记位
    int a[100]={0};
    double a3;
    a1=0;
    a2=0;
    a3=0;
    f3=0;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
        if(a[i]%3==0)
        {
            if(a1<a[i])
            {
                a1=a[i];
            }
        }
        else if(a[i]%3==1)
        {
            a2++;
        }
        else if(a[i]%3==2)
        {
            a3+=a[i];
            f3++;
        }
    }
    if(f3!=0)
    {
        a3=a3/f3;
    }
    if(a1==0)
    {
        printf("NONE ");
    }
    else
    {
        printf("%d ",a1);
    }
    if(a2==0)
    {
        printf("NONE ");
    }
    else
    {
        printf("%d ",a2);
    }
    if(a3==0)
    {
        printf("NONE");
    }
    else
    {
        printf("%.1lf",a3);
    }
    return 0;
}

/*18 3 NONE*/
