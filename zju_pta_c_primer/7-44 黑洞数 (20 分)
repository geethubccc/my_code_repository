黑洞数也称为陷阱数，又称“Kaprekar问题”，是一类具有奇特转换特性的数。

任何一个各位数字不全相同的三位数，经有限次“重排求差”操作，总会得到495。最后所得的495即为三位黑洞数。所谓“重排求差”操作即组成该数的数字重排后的最大数减去重排后的最小数。（6174为四位黑洞数。）

例如，对三位数207：

第1次重排求差得：720 - 27 ＝ 693；
第2次重排求差得：963 - 369 ＝ 594；
第3次重排求差得：954 - 459 ＝ 495；
以后会停留在495这一黑洞数。如果三位数的3个数字全相同，一次转换后即为0。

任意输入一个三位数，编程给出重排求差的过程。

输入格式：
输入在一行中给出一个三位数。

输出格式：
按照以下格式输出重排求差的过程：
序号: 数字重排后的最大数 - 重排后的最小数 = 差值

序号从1开始，直到495出现在等号右边为止。

输入样例：
123
输出样例：
1: 321 - 123 = 198
2: 981 - 189 = 792
3: 972 - 279 = 693
4: 963 - 369 = 594
5: 954 - 459 = 495

/*要有排序*/
#include <stdio.h>
int paixudx(int a)
{
    int b,s,g,t;
    b=a/100;
    s=a%100/10;
    g=a%10;
    if(b<s)
    {
        t=b;
        b=s;
        s=t;
    }
    if(b<g)
    {
        t=b;
        b=g;
        g=t;
    }
    if(s<g)
    {
        t=g;
        g=s;
        s=t;
    }
    a=b*100+s*10+g;
    return a;
//     printf("%d",a);
}
int paixuxd(int a)
{
    int b,s,g,t;
    b=a/100;
    s=a%100/10;
    g=a%10;
    if(b>g)
    {
        t=b;
        b=g;
        g=t;
    }
    if(s>g)
    {
        t=g;
        g=s;
        s=t;
    }
    if(b>s)
    {
        t=b;
        b=s;
        s=t;
    }
    a=b*100+s*10+g;
//     printf("%d",a);
    return a;
}
int main()
{
    int in,bj,js,i;
    i=0;
    scanf("%d",&in);
    
        i++;
        bj=paixudx(in);
        js=paixuxd(in);
        in=bj-js;
        printf("%d: %d - %d = %d",i,bj,js,in);
    while(in!=495)
        {
        i++;
        bj=paixudx(in);
        js=paixuxd(in);
        in=bj-js;
        printf("\n%d: %d - %d = %d",i,bj,js,in);
        }
//         i++;
//         bj=paixudx(in);
//         js=paixuxd(in);
//         in=bj-js;
//         printf("%d: %d - %d = %d",i,bj,js,in);
    return 0;
}
