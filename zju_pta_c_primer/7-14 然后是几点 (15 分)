有时候人们用四位数字表示一个时间，比如 1106 表示 11 点零 6 分。现在，你的程序要根据起始时间和流逝的时间计算出终止时间。

读入两个数字，第一个数字以这样的四位数字表示当前时间，第二个数字表示分钟数，计算当前时间经过那么多分钟后是几点，结果也表示为四位数字。当小时为个位数时，没有前导的零，例如 5 点 30 分表示为 530；0 点 30 分表示为 030。注意，第二个数字表示的分钟数可能超过 60，也可能是负数。

输入格式：
输入在一行中给出 2 个整数，分别是四位数字表示的起始时间、以及流逝的分钟数，其间以空格分隔。注意：在起始时间中，当小时为个位数时，没有前导的零，即 5 点 30 分表示为 530；0 点 30 分表示为 030。流逝的分钟数可能超过 60，也可能是负数。

输出格式：
输出不多于四位数字表示的终止时间，当小时为个位数时，没有前导的零。题目保证起始时间和终止时间在同一天内。

输入样例：
1120 110
输出样例：
1310

Code(gcc):
// #include <stdio.h>
// int main()
// {
//     int h,m,inh,inm;                         //这种方法很难处理变量是负数的情况
//     int adh,adm,out;
//     scanf("%d %d",&inh,&inm);
//     h=inh/100;
//     m=inh%100;
//     printf("h=%d m=%d\n",h,m);          //h=11 m=20
//     adh=inm/60;
//     adm=inm%60;
//     printf("adh=%d adm=%d\n",adh,adm);//adh=1 adm=50
//     m=m+adm;
//     h=h+m/60+adh;
//     printf("h=%d m=%d\n",h,m);          //h=12 m=70
//     m=(m+60)%60;
//     h=h%24;
//     out=h*100+m;
//     printf("h=%d m=%d\n",h,m);
//     printf("%d",out);
//     return 0;
// }

// #include <stdio.h>
// int main()
// {
//     //尝试先把数字都变成分钟数      似乎可以先把时间加24小时（即默认变动时间不到-24小时）
//     int h,m;
//     int inh,inm;
//     scanf("%d %d",&inh,&inm);
// //     h=inh/100+inm/60;
// //     m=h*60+inh%100+inm%60;
// //     //printf("h=%d m=%d\n",h,m);
// //     h=m/60*100+m%60;
//     h=inh/100;
//     m=h*60+inh%100;
//     m+=inm;
//     h=m/60*100+m%60;
//     printf("%d",h);
//     return 0;
// }


#include<stdio.h>
int main()
{
    int start,past,hour1,hour2,mins1,mins2,hour,mins;
    scanf("%d %d",&start,&past);
    hour1=start/100;            //起始时间的小时
    hour2=past/60;              //流逝时间的小时
    mins1=start%100;            //起始时间的分钟
    mins2=past%60;              //流逝时间的分钟
    hour=hour1+hour2+(mins1+mins2)/60;  //终止时间的小时，分钟和大于60，小时+1
    mins=(mins1+mins2)%60;
    if(past>=0&&hour>=0&&hour<24)       //1.考虑流逝时间大于0的情况；2.保证起始时间和终止时间在同一天内
    {                                   //小时和分钟分开输出，不必考虑小时为个位数的情况
        printf("%d%02d",hour,mins);     //%02d很不辍
    }
    else                                //考虑流逝时间小于0的情况
    {
        printf("%d%02d",(hour-1+24)%24,mins+60);        //这道题的测试点有点问题，如果不加24的话也能过，但是用030 -110测试就过不了了，因为第二个数的范围题目未加限制，因此可能是绝对值很大的负数
    }                                                   //小时-1，分钟+60，变负为正
    return 0;
}
//本解法大量参考了https://www.cnblogs.com/LZC1402548603/p/15436862.html
